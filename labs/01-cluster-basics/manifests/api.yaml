apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    app: api
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: api
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: python:3.9-alpine
        ports:
        - containerPort: 3000
        command: ["/bin/sh"]
        args:
        - -c
        - |
          # Create simple Python HTTP server
          cat > /tmp/server.py << 'EOF'
          import http.server
          import socketserver
          import json
          from datetime import datetime
          
          class APIHandler(http.server.BaseHTTPRequestHandler):
              def do_GET(self):
                  if self.path == '/api/health':
                      response = {
                          "status": "healthy",
                          "timestamp": datetime.now().isoformat(),
                          "service": "support-lab-api"
                      }
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps(response).encode())
                  elif self.path == '/api/info':
                      response = {
                          "service": "support-lab-api",
                          "version": "1.0.0", 
                          "database": "postgres"
                      }
                      self.send_response(200)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps(response).encode())
                  else:
                      self.send_response(404)
                      self.send_header('Content-type', 'application/json')
                      self.end_headers()
                      self.wfile.write(json.dumps({"error": "Not found"}).encode())
          
          with socketserver.TCPServer(("", 3000), APIHandler) as httpd:
              print("API server running on port 3000")
              httpd.serve_forever()
          EOF
          
          cd /tmp && python server.py
        readinessProbe:
          tcpSocket:
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5